// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	gomock "github.com/golang/mock/gomock"
	main "github.com/lvl484/dbmigrator"
	reflect "reflect"
)

// MockDBManager is a mock of DBManager interface
type MockDBManager struct {
	ctrl     *gomock.Controller
	recorder *MockDBManagerMockRecorder
}

// MockDBManagerMockRecorder is the mock recorder for MockDBManager
type MockDBManagerMockRecorder struct {
	mock *MockDBManager
}

// NewMockDBManager creates a new mock instance
func NewMockDBManager(ctrl *gomock.Controller) *MockDBManager {
	mock := &MockDBManager{ctrl: ctrl}
	mock.recorder = &MockDBManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBManager) EXPECT() *MockDBManagerMockRecorder {
	return m.recorder
}

// SetKeyspace mocks base method
func (m *MockDBManager) SetKeyspace(keyspasename string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetKeyspace", keyspasename)
}

// SetKeyspace indicates an expected call of SetKeyspace
func (mr *MockDBManagerMockRecorder) SetKeyspace(keyspasename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeyspace", reflect.TypeOf((*MockDBManager)(nil).SetKeyspace), keyspasename)
}

// GetSchemaFromSQL mocks base method
func (m *MockDBManager) GetSchemaFromSQL() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaFromSQL")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSchemaFromSQL indicates an expected call of GetSchemaFromSQL
func (mr *MockDBManagerMockRecorder) GetSchemaFromSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaFromSQL", reflect.TypeOf((*MockDBManager)(nil).GetSchemaFromSQL))
}

// PutSchemaToNoSQL mocks base method
func (m *MockDBManager) PutSchemaToNoSQL() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSchemaToNoSQL")
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSchemaToNoSQL indicates an expected call of PutSchemaToNoSQL
func (mr *MockDBManagerMockRecorder) PutSchemaToNoSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSchemaToNoSQL", reflect.TypeOf((*MockDBManager)(nil).PutSchemaToNoSQL))
}

// GetDataFromSQL mocks base method
func (m *MockDBManager) GetDataFromSQL() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFromSQL")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDataFromSQL indicates an expected call of GetDataFromSQL
func (mr *MockDBManagerMockRecorder) GetDataFromSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFromSQL", reflect.TypeOf((*MockDBManager)(nil).GetDataFromSQL))
}

// ReaDataFromSingleTable mocks base method
func (m *MockDBManager) ReaDataFromSingleTable(selectquery, insertquery string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReaDataFromSingleTable", selectquery, insertquery)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReaDataFromSingleTable indicates an expected call of ReaDataFromSingleTable
func (mr *MockDBManagerMockRecorder) ReaDataFromSingleTable(selectquery, insertquery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReaDataFromSingleTable", reflect.TypeOf((*MockDBManager)(nil).ReaDataFromSingleTable), selectquery, insertquery)
}

// CloseConnection mocks base method
func (m *MockDBManager) CloseConnection() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConnection")
}

// CloseConnection indicates an expected call of CloseConnection
func (mr *MockDBManagerMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockDBManager)(nil).CloseConnection))
}

// ManageDataNoSQLtoSQL mocks base method
func (m *MockDBManager) ManageDataNoSQLtoSQL(postgr *main.SQLPostgres) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ManageDataNoSQLtoSQL", postgr)
}

// ManageDataNoSQLtoSQL indicates an expected call of ManageDataNoSQLtoSQL
func (mr *MockDBManagerMockRecorder) ManageDataNoSQLtoSQL(postgr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageDataNoSQLtoSQL", reflect.TypeOf((*MockDBManager)(nil).ManageDataNoSQLtoSQL), postgr)
}

// GetSchemaFromNoSQL mocks base method
func (m *MockDBManager) GetSchemaFromNoSQL(keyspace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaFromNoSQL", keyspace)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSchemaFromNoSQL indicates an expected call of GetSchemaFromNoSQL
func (mr *MockDBManagerMockRecorder) GetSchemaFromNoSQL(keyspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaFromNoSQL", reflect.TypeOf((*MockDBManager)(nil).GetSchemaFromNoSQL), keyspace)
}

// GetDataFromNoSQL mocks base method
func (m *MockDBManager) GetDataFromNoSQL() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFromNoSQL")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDataFromNoSQL indicates an expected call of GetDataFromNoSQL
func (mr *MockDBManagerMockRecorder) GetDataFromNoSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFromNoSQL", reflect.TypeOf((*MockDBManager)(nil).GetDataFromNoSQL))
}

// ReaDataFromSingleNoSQLTable mocks base method
func (m *MockDBManager) ReaDataFromSingleNoSQLTable(tabname, insertquery, selectquery string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReaDataFromSingleNoSQLTable", tabname, insertquery, selectquery)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReaDataFromSingleNoSQLTable indicates an expected call of ReaDataFromSingleNoSQLTable
func (mr *MockDBManagerMockRecorder) ReaDataFromSingleNoSQLTable(tabname, insertquery, selectquery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReaDataFromSingleNoSQLTable", reflect.TypeOf((*MockDBManager)(nil).ReaDataFromSingleNoSQLTable), tabname, insertquery, selectquery)
}

// ReturnSliceData mocks base method
func (m *MockDBManager) ReturnSliceData(tabcolums []main.Column, inMap map[string]interface{}) []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnSliceData", tabcolums, inMap)
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// ReturnSliceData indicates an expected call of ReturnSliceData
func (mr *MockDBManagerMockRecorder) ReturnSliceData(tabcolums, inMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnSliceData", reflect.TypeOf((*MockDBManager)(nil).ReturnSliceData), tabcolums, inMap)
}
